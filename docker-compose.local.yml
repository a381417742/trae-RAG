version: '3.8'

# RAG知识库问答系统 - 本地部署配置
# 结合本机已部署的Ollama服务，只部署必要的服务

services:
  # ===========================================
  # FastAPI应用服务
  # ===========================================
  fastapi-app:
    build:
      context: .
      dockerfile: docker/fastapi/Dockerfile
    container_name: rag_fastapi_local
    ports:
      - "8000:8000"
      - "8001:8001"  # 监控指标端口
    volumes:
      - ./src:/app/src:ro
      - ./data/uploads:/app/data/uploads
      - ./logs/app:/app/logs
    environment:
      - PYTHONPATH=/app
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - CHROMA_HOST=chroma
      - REDIS_HOST=redis
    env_file:
      - .env
    depends_on:
      - chroma
      - redis
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # ===========================================
  # Chroma向量数据库
  # ===========================================
  chroma:
    image: chromadb/chroma:latest
    container_name: rag_chroma_local
    ports:
      - "8002:8000"
    volumes:
      - ./data/chroma:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/chroma
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Redis缓存服务
  # ===========================================
  redis:
    image: redis:7.2-alpine
    container_name: rag_redis_local
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ===========================================
  # Nginx负载均衡器 (可选)
  # ===========================================
  nginx:
    image: nginx:1.25-alpine
    container_name: rag_nginx_local
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - fastapi-app
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Prometheus监控服务 (可选)
  # ===========================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: rag_prometheus_local
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Grafana可视化服务 (可选)
  # ===========================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: rag_grafana_local
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================================
# 网络配置
# ===========================================
networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ===========================================
# 数据卷配置
# ===========================================
volumes:
  chroma-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local